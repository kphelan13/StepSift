# Save the results as a CSV file
write.csv(m, 'var_exp_falloff_2.csv')
# Store the results of this iteration in the list
results_list[[iteration]] <- m
}
df <- NULL  # Initialize an empty dataframe to store results
# Iterate through a list of variables
for (v in covariates) {
if (!(v %in% current_variables)) {
var_explained = 0.0  # Initialize the variance explained
# Iterate through principal components
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(v, sep = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data1)  # Fit a linear regression model
s <- summary(m)  # Get model summary
var_explained = var_explained + s$r.squared * pca_data$variance[p]  # Calculate variance explained
}
ddf <- data.frame(variable = v, variance_explained = var_explained, row.names = v)  # Create a dataframe with results
df <- rbind(df, ddf)  # Add results to the main dataframe
} else {
df <- rbind(df, data.frame(variable = v, variance_explained = NA, row.names = v))  # If the variable is already in use, add NA
}
}
row.names(df) <- df$variable  # Set row names to the variable names
df <- subset(df[order(df$variance_explained, decreasing = TRUE), ], select = -variable)  # Order dataframe by variance explained
head(df, 1)  # Display the first row of the dataframe
current_variables <- c(current_variables, row.names(df)[1])  # Update the list of current variables
colnames(df) <- paste0(colnames(df), length(current_variables))  # Update column names
df_iter[[length(current_variables)]] <- df  # Store the dataframe in a list
# Iterate through principal components and update data1 with residuals
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(current_variables, collapse = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data0, na.action = na.exclude)  # Fit a linear regression model
data1[, p] <- residuals(m)  # Update data1 with residuals
}
# Initialize data structures
df_iter <- list()
data1 <- merge(pca_data$rotated, pca_data$metadata, by = 'row.names')
data0 <- data1
current_variables <- c()
df <- NULL  # Initialize an empty dataframe to store results
# Iterate through a list of variables
for (v in covariates) {
if (!(v %in% current_variables)) {
var_explained = 0.0  # Initialize the variance explained
# Iterate through principal components
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(v, sep = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data1)  # Fit a linear regression model
s <- summary(m)  # Get model summary
var_explained = var_explained + s$r.squared * pca_data$variance[p]  # Calculate variance explained
}
ddf <- data.frame(variable = v, variance_explained = var_explained, row.names = v)  # Create a dataframe with results
df <- rbind(df, ddf)  # Add results to the main dataframe
} else {
df <- rbind(df, data.frame(variable = v, variance_explained = NA, row.names = v))  # If the variable is already in use, add NA
}
}
row.names(df) <- df$variable  # Set row names to the variable names
df <- subset(df[order(df$variance_explained, decreasing = TRUE), ], select = -variable)  # Order dataframe by variance explained
head(df, 1)  # Display the first row of the dataframe
current_variables <- c(current_variables, row.names(df)[1])  # Update the list of current variables
colnames(df) <- paste0(colnames(df), length(current_variables))  # Update column names
df_iter[[length(current_variables)]] <- df  # Store the dataframe in a list
# Iterate through principal components and update data1 with residuals
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(current_variables, collapse = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data0, na.action = na.exclude)  # Fit a linear regression model
data1[, p] <- residuals(m)  # Update data1 with residuals
}
df <- NULL  # Initialize an empty dataframe to store results
# Iterate through a list of variables
for (v in covariates) {
if (!(v %in% current_variables)) {
var_explained = 0.0  # Initialize the variance explained
# Iterate through principal components
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(v, sep = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data1)  # Fit a linear regression model
s <- summary(m)  # Get model summary
var_explained = var_explained + s$r.squared * pca_data$variance[p]  # Calculate variance explained
}
ddf <- data.frame(variable = v, variance_explained = var_explained, row.names = v)  # Create a dataframe with results
df <- rbind(df, ddf)  # Add results to the main dataframe
} else {
df <- rbind(df, data.frame(variable = v, variance_explained = NA, row.names = v))  # If the variable is already in use, add NA
}
}
row.names(df) <- df$variable  # Set row names to the variable names
df <- subset(df[order(df$variance_explained, decreasing = TRUE), ], select = -variable)  # Order dataframe by variance explained
head(df, 1)  # Display the first row of the dataframe
current_variables <- c(current_variables, row.names(df)[1])  # Update the list of current variables
colnames(df) <- paste0(colnames(df), length(current_variables))  # Update column names
df_iter[[length(current_variables)]] <- df  # Store the dataframe in a list
# Iterate through principal components and update data1 with residuals
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(current_variables, collapse = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data0, na.action = na.exclude)  # Fit a linear regression model
data1[, p] <- residuals(m)  # Update data1 with residuals
}
df <- NULL  # Initialize an empty dataframe to store results
# Iterate through a list of variables
for (v in covariates) {
if (!(v %in% current_variables)) {
var_explained = 0.0  # Initialize the variance explained
# Iterate through principal components
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(v, sep = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data1)  # Fit a linear regression model
s <- summary(m)  # Get model summary
var_explained = var_explained + s$r.squared * pca_data$variance[p]  # Calculate variance explained
}
ddf <- data.frame(variable = v, variance_explained = var_explained, row.names = v)  # Create a dataframe with results
df <- rbind(df, ddf)  # Add results to the main dataframe
} else {
df <- rbind(df, data.frame(variable = v, variance_explained = NA, row.names = v))  # If the variable is already in use, add NA
}
}
row.names(df) <- df$variable  # Set row names to the variable names
df <- subset(df[order(df$variance_explained, decreasing = TRUE), ], select = -variable)  # Order dataframe by variance explained
head(df, 1)  # Display the first row of the dataframe
current_variables <- c(current_variables, row.names(df)[1])  # Update the list of current variables
colnames(df) <- paste0(colnames(df), length(current_variables))  # Update column names
df_iter[[length(current_variables)]] <- df  # Store the dataframe in a list
# Iterate through principal components and update data1 with residuals
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(current_variables, collapse = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data0, na.action = na.exclude)  # Fit a linear regression model
data1[, p] <- residuals(m)  # Update data1 with residuals
}
df <- NULL  # Initialize an empty dataframe to store results
# Iterate through a list of variables
for (v in covariates) {
if (!(v %in% current_variables)) {
var_explained = 0.0  # Initialize the variance explained
# Iterate through principal components
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(v, sep = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data1)  # Fit a linear regression model
s <- summary(m)  # Get model summary
var_explained = var_explained + s$r.squared * pca_data$variance[p]  # Calculate variance explained
}
ddf <- data.frame(variable = v, variance_explained = var_explained, row.names = v)  # Create a dataframe with results
df <- rbind(df, ddf)  # Add results to the main dataframe
} else {
df <- rbind(df, data.frame(variable = v, variance_explained = NA, row.names = v))  # If the variable is already in use, add NA
}
}
row.names(df) <- df$variable  # Set row names to the variable names
df <- subset(df[order(df$variance_explained, decreasing = TRUE), ], select = -variable)  # Order dataframe by variance explained
head(df, 1)  # Display the first row of the dataframe
current_variables <- c(current_variables, row.names(df)[1])  # Update the list of current variables
colnames(df) <- paste0(colnames(df), length(current_variables))  # Update column names
df_iter[[length(current_variables)]] <- df  # Store the dataframe in a list
# Iterate through principal components and update data1 with residuals
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(current_variables, collapse = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data0, na.action = na.exclude)  # Fit a linear regression model
data1[, p] <- residuals(m)  # Update data1 with residuals
}
df <- NULL  # Initialize an empty dataframe to store results
# Iterate through a list of variables
for (v in covariates) {
if (!(v %in% current_variables)) {
var_explained = 0.0  # Initialize the variance explained
# Iterate through principal components
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(v, sep = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data1)  # Fit a linear regression model
s <- summary(m)  # Get model summary
var_explained = var_explained + s$r.squared * pca_data$variance[p]  # Calculate variance explained
}
ddf <- data.frame(variable = v, variance_explained = var_explained, row.names = v)  # Create a dataframe with results
df <- rbind(df, ddf)  # Add results to the main dataframe
} else {
df <- rbind(df, data.frame(variable = v, variance_explained = NA, row.names = v))  # If the variable is already in use, add NA
}
}
row.names(df) <- df$variable  # Set row names to the variable names
df <- subset(df[order(df$variance_explained, decreasing = TRUE), ], select = -variable)  # Order dataframe by variance explained
head(df, 1)  # Display the first row of the dataframe
current_variables <- c(current_variables, row.names(df)[1])  # Update the list of current variables
colnames(df) <- paste0(colnames(df), length(current_variables))  # Update column names
df_iter[[length(current_variables)]] <- df  # Store the dataframe in a list
# Iterate through principal components and update data1 with residuals
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(current_variables, collapse = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data0, na.action = na.exclude)  # Fit a linear regression model
data1[, p] <- residuals(m)  # Update data1 with residuals
}
df <- NULL  # Initialize an empty dataframe to store results
# Iterate through a list of variables
for (v in covariates) {
if (!(v %in% current_variables)) {
var_explained = 0.0  # Initialize the variance explained
# Iterate through principal components
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(v, sep = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data1)  # Fit a linear regression model
s <- summary(m)  # Get model summary
var_explained = var_explained + s$r.squared * pca_data$variance[p]  # Calculate variance explained
}
ddf <- data.frame(variable = v, variance_explained = var_explained, row.names = v)  # Create a dataframe with results
df <- rbind(df, ddf)  # Add results to the main dataframe
} else {
df <- rbind(df, data.frame(variable = v, variance_explained = NA, row.names = v))  # If the variable is already in use, add NA
}
}
row.names(df) <- df$variable  # Set row names to the variable names
df <- subset(df[order(df$variance_explained, decreasing = TRUE), ], select = -variable)  # Order dataframe by variance explained
head(df, 1)  # Display the first row of the dataframe
current_variables <- c(current_variables, row.names(df)[1])  # Update the list of current variables
colnames(df) <- paste0(colnames(df), length(current_variables))  # Update column names
df_iter[[length(current_variables)]] <- df  # Store the dataframe in a list
# Iterate through principal components and update data1 with residuals
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(current_variables, collapse = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data0, na.action = na.exclude)  # Fit a linear regression model
data1[, p] <- residuals(m)  # Update data1 with residuals
}
df <- NULL  # Initialize an empty dataframe to store results
# Initialize a list to store dataframes for each iteration
df_iter <- list()
# Initialize data structures
df_iter <- list()
data1 <- merge(pca_data$rotated, pca_data$metadata, by = 'row.names')
data0 <- data1
current_variables <- c()
df <- NULL  # Initialize an empty dataframe to store results
# Initialize a list to store dataframes for each iteration
df_iter <- list()
# Iterate 10 times
for (iteration in 1:10) {
# Reset df to an empty dataframe at the beginning of each iteration
df <- NULL
# Iterate through a list of variables
for (v in covariates) {
if (!(v %in% current_variables)) {
var_explained = 0.0  # Initialize the variance explained
# Iterate through principal components
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(v, sep = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data1)  # Fit a linear regression model
s <- summary(m)  # Get model summary
var_explained = var_explained + s$r.squared * pca_data$variance[p]  # Calculate variance explained
}
ddf <- data.frame(variable = v, variance_explained = var_explained, row.names = v)  # Create a dataframe with results
df <- rbind(df, ddf)  # Add results to the main dataframe
} else {
df <- rbind(df, data.frame(variable = v, variance_explained = NA, row.names = v))  # If the variable is already in use, add NA
}
}
row.names(df) <- df$variable  # Set row names to the variable names
df <- subset(df[order(df$variance_explained, decreasing = TRUE), ], select = -variable)  # Order dataframe by variance explained
head(df, 1)  # Display the first row of the dataframe
current_variables <- c(current_variables, row.names(df)[1])  # Update the list of current variables
colnames(df) <- paste0(colnames(df), length(current_variables))  # Update column names
df_iter[[length(current_variables)]] <- df  # Store the dataframe in a list
# Iterate through principal components and update data1 with residuals
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(current_variables, collapse = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data0, na.action = na.exclude)  # Fit a linear regression model
data1[, p] <- residuals(m)  # Update data1 with residuals
}
df_iter[[iteration]] <- df
}
m <- merge(df_iter[[1]], df_iter[[2]], by = 'row.names')
row.names(m) <- m$Row.names
m <- subset(m, select = -Row.names)
for (i in 3:10) {
m <- merge(m, df_iter[[i]], by = 'row.names')
row.names(m) <- m$Row.names
m <- subset(m, select = -Row.names)
}
# Initialize data structures
df_iter <- list()
data1 <- merge(pca_data$rotated, pca_data$metadata, by = 'row.names')
data0 <- data1
current_variables <- c()
df <- NULL  # Initialize an empty dataframe to store results
# Initialize a list to store dataframes for each iteration
df_iter <- list()
# Iterate 10 times
for (iteration in 1:length(covariates)) {
# Reset df to an empty dataframe at the beginning of each iteration
df <- NULL
# Iterate through a list of variables
for (v in covariates) {
if (!(v %in% current_variables)) {
var_explained = 0.0  # Initialize the variance explained
# Iterate through principal components
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(v, sep = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data1)  # Fit a linear regression model
s <- summary(m)  # Get model summary
var_explained = var_explained + s$r.squared * pca_data$variance[p]  # Calculate variance explained
}
ddf <- data.frame(variable = v, variance_explained = var_explained, row.names = v)  # Create a dataframe with results
df <- rbind(df, ddf)  # Add results to the main dataframe
} else {
df <- rbind(df, data.frame(variable = v, variance_explained = NA, row.names = v))  # If the variable is already in use, add NA
}
}
row.names(df) <- df$variable  # Set row names to the variable names
df <- subset(df[order(df$variance_explained, decreasing = TRUE), ], select = -variable)  # Order dataframe by variance explained
head(df, 1)  # Display the first row of the dataframe
current_variables <- c(current_variables, row.names(df)[1])  # Update the list of current variables
colnames(df) <- paste0(colnames(df), length(current_variables))  # Update column names
df_iter[[length(current_variables)]] <- df  # Store the dataframe in a list
# Iterate through principal components and update data1 with residuals
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(current_variables, collapse = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data0, na.action = na.exclude)  # Fit a linear regression model
data1[, p] <- residuals(m)  # Update data1 with residuals
}
df_iter[[iteration]] <- df
}
m <- merge(df_iter[[1]], df_iter[[2]], by = 'row.names')
row.names(m) <- m$Row.names
m <- subset(m, select = -Row.names)
for (i in 3:length(covariates)) {
m <- merge(m, df_iter[[i]], by = 'row.names')
row.names(m) <- m$Row.names
m <- subset(m, select = -Row.names)
}
perform_pca_and_var_exp_analysis <- function(data, metadata, covariates, numeric_covariates, removeVar = 0.1, rank = 10) {
#Format Metadata and specify numeric covariates
metadata[,numeric_covariates] <- lapply(metadata[,numeric_covariates], as.numeric)
metadata <- metadata %>% mutate_if(is.character, as.factor) %>%
mutate_if(is.integer, as.factor)
# Perform PCA
pca_data <- pca(data, metadata = metadata, removeVar = removeVar, rank = rank)
# Create a scree plot and save it as an image
screeplot(pca_data, axisLabSize = 9)
ggsave('scree_plot.png', width = 7, height = 5)
# Initialize data structures
df_iter <- list()
data1 <- merge(pca_data$rotated, pca_data$metadata, by = 'row.names')
data0 <- data1
current_variables <- c()
df <- NULL  # Initialize an empty dataframe to store results
# Initialize a list to store dataframes for each iteration
df_iter <- list()
# Iterate 10 times
for (iteration in 1:length(covariates)) {
# Reset df to an empty dataframe at the beginning of each iteration
df <- NULL
# Iterate through a list of variables
for (v in covariates) {
if (!(v %in% current_variables)) {
var_explained = 0.0  # Initialize the variance explained
# Iterate through principal components
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(v, sep = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data1)  # Fit a linear regression model
s <- summary(m)  # Get model summary
var_explained = var_explained + s$r.squared * pca_data$variance[p]  # Calculate variance explained
}
ddf <- data.frame(variable = v, variance_explained = var_explained, row.names = v)  # Create a dataframe with results
df <- rbind(df, ddf)  # Add results to the main dataframe
} else {
df <- rbind(df, data.frame(variable = v, variance_explained = NA, row.names = v))  # If the variable is already in use, add NA
}
}
row.names(df) <- df$variable  # Set row names to the variable names
df <- subset(df[order(df$variance_explained, decreasing = TRUE), ], select = -variable)  # Order dataframe by variance explained
head(df, 1)  # Display the first row of the dataframe
current_variables <- c(current_variables, row.names(df)[1])  # Update the list of current variables
colnames(df) <- paste0(colnames(df), length(current_variables))  # Update column names
df_iter[[length(current_variables)]] <- df  # Store the dataframe in a list
# Iterate through principal components and update data1 with residuals
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(current_variables, collapse = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data0, na.action = na.exclude)  # Fit a linear regression model
data1[, p] <- residuals(m)  # Update data1 with residuals
}
df_iter[[iteration]] <- df
}
m <- merge(df_iter[[1]], df_iter[[2]], by = 'row.names')
row.names(m) <- m$Row.names
m <- subset(m, select = -Row.names)
for (i in 3:length(covariates)) {
m <- merge(m, df_iter[[i]], by = 'row.names')
row.names(m) <- m$Row.names
m <- subset(m, select = -Row.names)
}
# Save the results as a CSV file
write.csv(m, 'var_exp_falloff_2.csv')
# Return the results or any other relevant information
return(list(pca_data = pca_data, variance_explained_data = m))
}
result <- perform_pca_and_var_exp_analysis(counts, metadata = metadata, covariates = covariates, numeric_covariates = numeric_covariates, removeVar = 0.1, rank = 10)
# Create a vector of new column labels
new_col_names <- paste("Step", 1:ncol(m))
# Assign the new column labels to 'm'
colnames(m) <- new_col_names
print(m)
# Find the variable with the highest value in each column
highest_vars <- apply(m, 2, function(col) rownames(m)[which.max(col)])
# Sort 'm' columns based on the identified variables
m_sorted <- m[, order(highest_vars)]
# Print the sorted dataframe 'm_sorted'
print(m_sorted)
View(m_sorted)
# Reorder the rows in 'm' based on the identified variables
m_reordered <- m[match(highest_vars, rownames(m)), ]
View(m_reordered)
SVR <- function(data, metadata, covariates, numeric_covariates, removeVar = 0.1, rank = 10) {
#Format Metadata and specify numeric covariates
metadata[,numeric_covariates] <- lapply(metadata[,numeric_covariates], as.numeric)
metadata <- metadata %>% mutate_if(is.character, as.factor) %>%
mutate_if(is.integer, as.factor)
# Perform PCA
pca_data <- pca(data, metadata = metadata, removeVar = removeVar, rank = rank)
# Create a scree plot and save it as an image
screeplot(pca_data, axisLabSize = 9)
ggsave('scree_plot.png', width = 7, height = 5)
# Initialize data structures
df_iter <- list()
data1 <- merge(pca_data$rotated, pca_data$metadata, by = 'row.names')
data0 <- data1
current_variables <- c()
df <- NULL  # Initialize an empty dataframe to store results
# Initialize a list to store dataframes for each iteration
df_iter <- list()
# Iterate 10 times
for (iteration in 1:length(covariates)) {
# Reset df to an empty dataframe at the beginning of each iteration
df <- NULL
# Iterate through a list of variables
for (v in covariates) {
if (!(v %in% current_variables)) {
var_explained = 0.0  # Initialize the variance explained
# Iterate through principal components
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(v, sep = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data1)  # Fit a linear regression model
s <- summary(m)  # Get model summary
var_explained = var_explained + s$r.squared * pca_data$variance[p]  # Calculate variance explained
}
ddf <- data.frame(variable = v, variance_explained = var_explained, row.names = v)  # Create a dataframe with results
df <- rbind(df, ddf)  # Add results to the main dataframe
} else {
df <- rbind(df, data.frame(variable = v, variance_explained = NA, row.names = v))  # If the variable is already in use, add NA
}
}
row.names(df) <- df$variable  # Set row names to the variable names
df <- subset(df[order(df$variance_explained, decreasing = TRUE), ], select = -variable)  # Order dataframe by variance explained
head(df, 1)  # Display the first row of the dataframe
current_variables <- c(current_variables, row.names(df)[1])  # Update the list of current variables
colnames(df) <- paste0(colnames(df), length(current_variables))  # Update column names
df_iter[[length(current_variables)]] <- df  # Store the dataframe in a list
# Iterate through principal components and update data1 with residuals
for (p in names(pca_data$variance)) {
f <- formula(paste(p, paste(current_variables, collapse = '+'), sep = '~'))  # Create a formula
m <- lm(f, data = data0, na.action = na.exclude)  # Fit a linear regression model
data1[, p] <- residuals(m)  # Update data1 with residuals
}
df_iter[[iteration]] <- df
}
m <- merge(df_iter[[1]], df_iter[[2]], by = 'row.names')
row.names(m) <- m$Row.names
m <- subset(m, select = -Row.names)
for (i in 3:length(covariates)) {
m <- merge(m, df_iter[[i]], by = 'row.names')
row.names(m) <- m$Row.names
m <- subset(m, select = -Row.names)
}
# Create a vector of new column labels
new_col_names <- paste("Step", 1:ncol(m))
# Assign the new column labels to 'm'
colnames(m) <- new_col_names
# Find the variable with the highest value in each column
highest_vars <- apply(m, 2, function(col) rownames(m)[which.max(col)])
# Reorder the rows in 'm' based on the identified variables
m_reordered <- m[match(highest_vars, rownames(m)), ]
# Save the results as a CSV file
write.csv(m_reordered, 'Stepwise_Variance_Regression.csv')
# Return the results or any other relevant information
return(list(pca_data = pca_data, variance_explained_data = m))
}
result <- SVR(counts, metadata = metadata, covariates = covariates, numeric_covariates = numeric_covariates, removeVar = 0.1, rank = 10)
install.packages("devtools")
install.packages("roxygen2")
install.packages('VarVoyage')
getwd()
load_all("V:/StepSift")
library(devtools)
load_all("V:/StepSift")
list.files()
getwd()
setwd("V:/StepSift")
load_all("V:/StepSift")
getwd()
list.files()
load_all(".")
load_all(".")
setwd("V:/StepSift")
load_all(".")
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
library(devtools);
load_all(".");
?SVR
roxygenise()
library(devtools);
load_all(".");
?SVR
